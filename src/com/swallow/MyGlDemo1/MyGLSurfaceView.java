package com.swallow.MyGlDemo1;

import java.util.Timer;
import java.util.TimerTask;

import javax.microedition.khronos.egl.EGL10;
import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.egl.EGLContext;
import javax.microedition.khronos.egl.EGLDisplay;
import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.opengl.GLSurfaceView;
import android.os.Process;
import android.util.Log;

/**
 * GLSurfaceView for display the graphic generated by the c code.
 * @author swallow
 * @since 2014.11.26
 */
public class MyGLSurfaceView extends GLSurfaceView {

	public MyGLSurfaceView(Context context){
		super(context);
		this.setEGLContextFactory(new MyContextFactory());
		this.setRenderer(new MyRenderer());
		this.setRenderMode(RENDERMODE_WHEN_DIRTY);
		
		new Timer().schedule(new TimerTask() {
			@Override
			public void run() {
				MyGLSurfaceView.this.requestRender();
			}
		}, 0, 20);
	}
	
	/**
	 * Implement the context factory
	 * @author swallow
	 * @since 2014.11.26
	 */
	private static class MyContextFactory implements GLSurfaceView.EGLContextFactory{
        private static int EGL_CONTEXT_CLIENT_VERSION = 0x3098;
        public EGLContext createContext(EGL10 egl, EGLDisplay display, EGLConfig eglConfig) {
            int[] attrib_list = {EGL_CONTEXT_CLIENT_VERSION, 2, EGL10.EGL_NONE };
            EGLContext context = egl.eglCreateContext(display, eglConfig, EGL10.EGL_NO_CONTEXT, attrib_list);
            return context;
        }

        public void destroyContext(EGL10 egl, EGLDisplay display, EGLContext context) {
            egl.eglDestroyContext(display, context);
        }
	}
}

/**
 * Implement the renderer to draw the graphics
 * @author swallow
 * @since 2014.11.26
 */
class MyRenderer implements GLSurfaceView.Renderer{
	@Override
	public void onDrawFrame(GL10 arg0) {
		MyGLDemoLib.nativeStep();
		FPSCounter.logFrame();
	}

	@Override
	public void onSurfaceChanged(GL10 arg0, int arg1, int arg2) {
		MyGLDemoLib.nativeInit(arg1, arg2);
	}

	@Override
	public void onSurfaceCreated(GL10 arg0, EGLConfig arg1) {
		UpdateThread ut = new UpdateThread();
		ut.start();
		Process.setThreadPriority(Process.THREAD_PRIORITY_DISPLAY);
	}
}

class FPSCounter {  
    static long startTime = System.nanoTime();  
    static int frames = 0;  
    static long time = System.currentTimeMillis();
      
    public static void logFrame() {  
    	long interval = System.currentTimeMillis() - time;
    	if(interval < 40){
    		System.out.println("##########   "+frames);
    		try {
				Thread.sleep(40-interval);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}else{
    		Log.e("ee", "@@@@@@@@   "+interval);
    	}
    	time = System.currentTimeMillis();
        frames++;  
        if(System.nanoTime() - startTime >= 1000000000) {  
            Log.d("FPSCounter", "fps: " + frames);  
            frames = 0;  
            startTime = System.nanoTime();  
        }  
    }  
} 

/**
 * Update the circle place.
 * @author swallow
 * @since 2014.12.4
 */
class UpdateThread extends Thread{

	@Override
	public void run() {
		while (true) {
			MyGLDemoLib.nativeUpdate();
		}
	}
}
